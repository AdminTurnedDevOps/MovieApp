trigger:
  branches:
    include:
      - master
  paths:
    exclude:
      - infra_build_scripts/*

variables:
  - name: project_name
    value: "movieapp"
  - name: azure_resource_group_name
    value: "movieapp"
  - name: keyvault_name
    value: "MovieApp-KV"
  - name: storage_account_name
    value: movieappstorage
  - name: subscription_id
    value: "1427e7fb-a488-4ec5-be44-30ac10ca2e95"
  - name: buildConfiguration
    value: "Release"

stages:
  - stage: "Infrastructure"
    pool:
      vmImage: "ubuntu-latest"
    jobs:
      # - job: TemplateTests
      #   pool:
      #     vmImage: "windows-latest"
      #   steps:
      #     - task: AzurePowerShell@5
      #       inputs:
      #         azureSubscription: "ARM"
      #         ScriptType: "FilePath"
      #         ScriptPath: "$(System.DefaultWorkingDirectory)/infra_build_scripts/tests/invoke-template-test.ps1"
      #         ScriptArguments: '-ResourceType "compute","database","network","storage" -ResourceGroupName "$(azure_resource_group_name)"'
      #         FailOnStandardError: true
      #         azurePowerShellVersion: "LatestVersion"
      #     - task: PublishTestResults@2
      #       inputs:
      #         testResultsFormat: "NUnit"
      #         testResultsFiles: "$(System.DefaultWorkingDirectory)/infra_build_scripts/tests/templates.tests.xml"
      #         failTaskOnFailedTests: true
      - job: Network
        dependsOn:
          # - TemplateTests
        steps:
          - task: AzureResourceManagerTemplateDeployment@3
            name: "NetworkARMDeployment"
            inputs:
              azureResourceManagerConnection: "ARM"
              subscriptionId: "$(subscription_id)"
              action: "Create Or Update Resource Group"
              resourceGroupName: $(azure_resource_group_name)
              location: "East US"
              templateLocation: "Linked artifact"
              csmFile: "$(System.DefaultWorkingDirectory)/infra_build_scripts/arm_templates/network.json"
              csmParametersFile: "$(System.DefaultWorkingDirectory)/infra_build_scripts/arm_templates/network.params.json"
              overrideParameters: "-projectName $(project_name)"
              deploymentMode: "Incremental"
              deploymentOutputs: network_arm
          - pwsh: $(System.DefaultWorkingDirectory)/infra_build_scripts/parse_arm_deployment_output.ps1 -ArmOutputString '$(network_arm)' -MakeOutput -ErrorAction Stop
            name: CreateOutputVariables
            displayName: "Create output variables"
      - job: Storage
        dependsOn:
          # - TemplateTests
        steps:
          - task: PowerShell@2
            displayName: "Generate datetime stamp for storage account"
            inputs:
              targetType: "inline"
              script: |
                ## Expire tomorrow
                $signedExpirySasToken = Get-Date ((Get-Date).AddDays(1)) -Format 'yyyy-MM-ddT00:00:00Z'
                "##vso[task.setvariable variable=signedExpirySasToken;]$signedExpirySasToken"
              pwsh: true
          - task: AzureResourceManagerTemplateDeployment@3
            displayName: "Storage"
            inputs:
              azureResourceManagerConnection: "ARM"
              subscriptionId: "$(subscription_id)"
              action: "Create Or Update Resource Group"
              resourceGroupName: $(azure_resource_group_name)
              location: "East US"
              templateLocation: "Linked artifact"
              csmFile: "$(System.DefaultWorkingDirectory)/infra_build_scripts/arm_templates/storage.json"
              csmParametersFile: "$(System.DefaultWorkingDirectory)/infra_build_scripts/arm_templates/storage.params.json"
              overrideParameters: "-signedExpirySasToken $(signedExpirySasToken) -storageAccountName $(storage_account_name)"
              deploymentMode: "Incremental"
              deploymentOutputs: storage_arm
          - pwsh: $(System.DefaultWorkingDirectory)/infra_build_scripts/parse_arm_deployment_output.ps1 -ArmOutputString '$(storage_arm)' -MakeOutput -ErrorAction Stop
            name: CreateOutputVariables
      - job: Compute
        pool:
          vmImage: "windows-latest" ## Only needed because of Publish-AzVMDscConfiguration
        dependsOn:
          - Network
          # - TemplateTests
          - Storage
        variables:
          subnetName: $[ dependencies.Network.outputs['CreateOutputVariables.subnetName'] ]
          virtualNetworkName: $[ dependencies.Network.outputs['CreateOutputVariables.virtualNetworkName'] ]
          loadBalancerName: $[ dependencies.Network.outputs['CreateOutputVariables.loadBalancerName'] ]
          loadBalancerBackendPoolName: $[ dependencies.Network.outputs['CreateOutputVariables.loadBalancerBackendPoolName'] ]
          setupScriptContainerName: $[ dependencies.Storage.outputs['CreateOutputVariables.setupScriptContainerName'] ]
          sasToken: $[ dependencies.Storage.outputs['CreateOutputVariables.sasToken'] ]
          storageAccountKey: $[ dependencies.Storage.outputs['CreateOutputVariables.storageAccountKey'] ]
        steps:
          - task: AzurePowerShell@5
            displayName: "Package up DSC script"
            inputs:
              azureSubscription: "ARM"
              ScriptType: "InlineScript"
              Inline: |
                Install-Module xPSDesiredStateConfiguration -Force
                Publish-AzVMDscConfiguration "$(System.DefaultWorkingDirectory)\infra_build_scripts\iis_setup.ps1" -OutputArchivePath "$(System.DefaultWorkingDirectory)\infra_build_scripts\iis_setup.zip"
              FailOnStandardError: true
              azurePowerShellVersion: "LatestVersion"
          - task: AzureCLI@2
            displayName: "Copy IIS DSC script to storage account"
            inputs:
              azureSubscription: "ARM"
              scriptType: "batch"
              scriptLocation: "inlineScript"
              inlineScript: 'az storage blob upload --container-name $(setupScriptContainerName) --file "$(System.DefaultWorkingDirectory)/infra_build_scripts/iis_setup.zip" --name iis_setup.zip --account-name "$(storage_account_name)" --account-key "$(storageAccountKey)"'
          - task: AzureResourceManagerTemplateDeployment@3
            name: "Compute"
            inputs:
              azureResourceManagerConnection: "ARM"
              subscriptionId: "$(subscription_id)"
              action: "Create Or Update Resource Group"
              resourceGroupName: $(azure_resource_group_name)
              location: "East US"
              templateLocation: "Linked artifact"
              csmFile: "$(System.DefaultWorkingDirectory)/infra_build_scripts/arm_templates/compute.json"
              csmParametersFile: "$(System.DefaultWorkingDirectory)/infra_build_scripts/arm_templates/compute.params.json"
              overrideParameters: "-subnetName $(subnetName) -virtualNetworkName $(virtualNetworkName) -loadBalancerName $(loadBalancerName) -loadBalancerBackendPoolName $(loadBalancerBackendPoolName) -storageAccountName $(storage_account_name) -setupScriptContainerName $(setupScriptContainerName) -sasToken $(sasToken)"
              deploymentMode: "Incremental"
              deploymentOutputs: compute_arm
          - pwsh: $(System.DefaultWorkingDirectory)/infra_build_scripts/parse_arm_deployment_output.ps1 -ArmOutputString '$(compute_arm)' -ErrorAction Stop
            name: CreateOutputVariables
          - pwsh: |
              $null = mkdir "$(Pipeline.Workspace)/variables"
              $varFilePath = "$(Pipeline.Workspace)\variables\vmNames"
              Write-Output "Writing [$env:vmNames] to [$varFilePath]..."
              Set-Content -Path $varFilePath -Value $env:vmNames
          - publish: $(Pipeline.Workspace)/variables ## to send the VM names to the application/release job
            artifact: variables
      - job: Database
        pool:
          vmImage: "windows-latest"
        dependsOn:
          # - TemplateTests
        steps:
          - task: AzureResourceManagerTemplateDeployment@3 ## Create the Azure SQL DB
            name: "DatabaseARMDeployment"
            inputs:
              azureResourceManagerConnection: "ARM"
              subscriptionId: "$(subscription_id)"
              action: "Create Or Update Resource Group"
              resourceGroupName: $(azure_resource_group_name)
              location: "East US"
              templateLocation: "Linked artifact"
              csmFile: "$(System.DefaultWorkingDirectory)/infra_build_scripts/arm_templates/database.json"
              csmParametersFile: "$(System.DefaultWorkingDirectory)/infra_build_scripts/arm_templates/database.params.json"
              deploymentMode: "Incremental"
              deploymentOutputs: database_arm
          - pwsh: $(System.DefaultWorkingDirectory)/infra_build_scripts/parse_arm_deployment_output.ps1 -ArmOutputString '$(database_arm)' -ErrorAction Stop
            name: CreateOutputVariables
          - task: AzureKeyVault@1
            displayName: "Download SQL key vault variables"
            inputs:
              azureSubscription: 'ARM'
              KeyVaultName: $(keyvault_name)
              SecretsFilter: 'SqlAdminUsername,SqlAdminPassword'
          - task: SqlAzureDacpacDeployment@1 ## Build database schema
            inputs:
              azureSubscription: 'ARM'
              AuthenticationType: 'server'
              DatabaseName: "$(databaseName)" ## From database ARM deployment
              ServerName: "$(sqlServerName)" ## From database ARM deployment
              SqlUsername: "$(SqlAdminUsername)" ## From keyvault
              SqlPassword: "$(SqlAdminPassword)" ## From keyvault
              deployType: 'SqlTask'
              SqlFile: '$(System.DefaultWorkingDirectory)/infra_build_scripts/MovieSchema.sql'
              IpDetectionMethod: 'AutoDetect'
      # - job: InfrastructureTesting
      #   dependsOn:
      #     - Network
      #     - Storage
      #     - Compute
      #     - Database
      #     - TemplateTests
      #   variables:
      #     publicDnsName: $[ dependencies.Network.outputs['CreaterOutputVariables.publicDnsName'] ]
      #   steps:
      #     - task: AzurePowerShell@5
      #       inputs:
      #         azureSubscription: "ARM"
      #         ScriptType: "FilePath"
      #         ScriptPath: "$(System.DefaultWorkingDirectory)/infra_build_scripts/tests/invoke-infrastructure-test.ps1"
      #         ScriptArguments: '-Parameter @{publicDnsName="$(publicDnsName)"}'
      #         FailOnStandardError: true
      #         azurePowerShellVersion: "LatestVersion"
      #     - task: PublishTestResults@2
      #       inputs:
      #         testResultsFormat: "NUnit"
      #         testResultsFiles: "$(System.DefaultWorkingDirectory)/infra_build_scripts/tests/infrastructure.tests.xml"
      #         failTaskOnFailedTests: true
  - stage: Application
    dependsOn: Infrastructure
    pool:
      vmImage: "ubuntu-latest"
    jobs:
      - job: Build
        variables:
          sqlServerName: $[ dependencies.Database.outputs['CreateOutputVariables.sqlServerName'] ]
          sqlDatabaseName: $[ dependencies.Database.outputs['CreateOutputVariables.sqlDatabaseName'] ]
        steps:
          - pwsh: |
              $appSettings = Get-Content -Path $(System.DefaultWorkingDirectory)/appsettings.json | ConvertFrom-Json
              $appSettings.ConnectionStrings.MovieContext = "Server=$($env:sqlServerName);User Id=$($env:SqlAdminPassword);Password=;Database=MoviesDB;Backend=SqlAzure"
              $appSettings | ConvertTo-Json | Set-Content -Path $(System.DefaultWorkingDirectory)/appsettings.json
            displayName: "Replace runtime SQL placeholders"
          # Build and publish the application library
          - task: DotNetCoreCLI@2
            displayName: "dotnet build"
            inputs:
              command: build
              projects: "*.csproj"
              arguments: "--configuration $(buildConfiguration)"
          - task: DotNetCoreCLI@2
            displayName: "dotnet publish"
            inputs:
              command: publish
              publishWebProjects: True
              arguments: "--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)"
              zipAfterPublish: True
          - publish: $(Build.StagingDirectory)
            artifact: app
      - job: Release
        dependsOn: Build
        pool:
          vmImage: "windows-latest" ## Only to use the AzureFileCopy task
        steps:
          - checkout: none
          - task: DownloadPipelineArtifact@2
            displayName: "Download the app published in the Build job."
            inputs:
              source: 'current'
              path: $(Build.ArtifactStagingDirectory)
              artifact: app
          - task: DownloadPipelineArtifact@2 ## to get the VM names from the infrastructure stage
            displayName: "Download the variables created in the infrastrsucture stage."
            inputs:
              source: 'current'
              path: $(Build.ArtifactStagingDirectory)
              artifact: variables
          - pwsh: | ## Create the vars to provide to the Azure file copy task
              try {
              $ErrorActionPreference = 'Stop'
              if (-not (Test-Path -Path ""$(Pipeline.Workspace)\variables\vmNames")) {
                throw "vmNames variable file does not exist!"
              }
              $vmNames=Get-Content -Path "$(Pipeline.Workspace)\variables\vmNames" -Raw
              Write-Output "VmNames var is [$vmNames]"
              "##vso[task.setvariable variable=vmNames]$vmNames"
              } catch {
                write-output $_.Exception.Message
              }
          - task: AzureKeyVault@1
            displayName: "Download the VM admin username and password vars"
            inputs:
              azureSubscription: 'ARM'
              KeyVaultName: $(keyvault_name)
              SecretsFilter: 'StandardVmAdminUsername,StandardVmAdminPassword'
          - task: AzureFileCopy@4
            displayName: "Copy the application to the VMs."
            inputs:
              sourcePath: $(Build.ArtifactStagingDirectory)\app.zip
              azureSubscription: ARM
              destination: AzureVMs
              storage: $(storage_account_name) ## temp location as an intermediary to transfer files to VMs
              resourceGroup: $(azure_resource_group_name)
              MachineNames: $(vmNames) ## vmNames from Compute job in Infrastructure stage
              vmsAdminUserName: $(StandardVmAdminUsername) ## From keyvault
              vmsAdminPassword: $(StandardVmAdminPassword) ## From keyvault
              targetPath: 'C:\inetpub\wwwroot'
              copyFilesInParallel: true
              cleanTargetBeforeCopy: true