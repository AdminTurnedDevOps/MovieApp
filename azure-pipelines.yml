trigger:
  branches:
    include:
      - master
  paths:
    exclude:
      - buildscripts/*

variables:
  - name: project_name
    value: "movieapp"
  - name: azure_resource_group_name
    value: "movieapp"
  - name: storage_account_name
    value: "movieappstorage"
  - name: subscription_id
    value: "1427e7fb-a488-4ec5-be44-30ac10ca2e95"
  - name: buildConfiguration
    value: "Release"

stages:
  - stage: "Infrastructure"
    jobs:
      - job: TemplateTests
        pool:
          vmImage: "windows-latest"
        steps:
          - task: AzurePowerShell@5
            inputs:
              azureSubscription: "ARM"
              ScriptType: "FilePath"
              ScriptPath: "$(System.DefaultWorkingDirectory)/buildscripts/tests/invoke-template-test.ps1"
              ScriptArguments: '-ResourceType "compute","database","network","storage" -ResourceGroupName "$(azure_resource_group_name)"'
              FailOnStandardError: true
              azurePowerShellVersion: "LatestVersion"
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: "NUnit"
              testResultsFiles: "$(System.DefaultWorkingDirectory)/buildscripts/tests/templates.tests.xml"
              failTaskOnFailedTests: true
      - job: Network
        dependsOn:
          - TemplateTests
        pool:
          vmImage: "windows-latest"
        steps:
          - task: AzureResourceManagerTemplateDeployment@3
            name: "NetworkARMDeployment"
            inputs:
              azureResourceManagerConnection: "ARM"
              subscriptionId: "$(subscription_id)"
              action: "Create Or Update Resource Group"
              resourceGroupName: $(azure_resource_group_name)
              location: "East US"
              templateLocation: "Linked artifact"
              csmFile: "$(System.DefaultWorkingDirectory)/buildscripts/arm_templates/network.json"
              csmParametersFile: "$(System.DefaultWorkingDirectory)/buildscripts/arm_templates/network.params.json"
              overrideParameters: "-projectName $(project_name)"
              deploymentMode: "Incremental"
              deploymentOutputs: network_arm
          - task: PowerShell@2
            name: "ParseNetworkARMOutput"
            inputs:
              targetType: "inline"
              script: |
                $output = $Env:network_arm | ConvertFrom-Json
                $vars = 'subnetName','virtualNetworkName','loadBalancerName','loadBalancerBackendPoolName','publicDnsName'
                $vars | foreach {
                  echo "##vso[task.setvariable variable=$_;isOutput=true]$($output.$_.value)"
                }
              pwsh: true
      - job: Storage
        dependsOn:
          - TemplateTests
        pool:
          vmImage: "windows-latest"
        steps:
          - task: PowerShell@2
            displayName: "Generate datetime stamp for storage account"
            inputs:
              targetType: "inline"
              script: |
                ## Expire tomorrow
                $signedExpirySasToken = Get-Date ((Get-Date).AddDays(1)) -Format 'yyyy-MM-ddT00:00:00Z'
                "##vso[task.setvariable variable=signedExpirySasToken;]$signedExpirySasToken"
              pwsh: true
          - task: AzureResourceManagerTemplateDeployment@3
            displayName: "Storage"
            inputs:
              azureResourceManagerConnection: "ARM"
              subscriptionId: "$(subscription_id)"
              action: "Create Or Update Resource Group"
              resourceGroupName: $(azure_resource_group_name)
              location: "East US"
              templateLocation: "Linked artifact"
              csmFile: "$(System.DefaultWorkingDirectory)/buildscripts/arm_templates/storage.json"
              csmParametersFile: "$(System.DefaultWorkingDirectory)/buildscripts/arm_templates/storage.params.json"
              overrideParameters: "-storageAccountName $(storage_account_name) -signedExpirySasToken $(signedExpirySasToken)"
              deploymentMode: "Incremental"
              deploymentOutputs: storage_arm
          - task: PowerShell@2
            name: "ParseStorageARMOutput"
            inputs:
              targetType: "inline"
              script: |
                $output = $Env:storage_arm | ConvertFrom-Json
                $vars = 'storageAccountName','setupScriptContainerName','sasToken','storageAccountKey'
                $vars | foreach {
                  echo "##vso[task.setvariable variable=$_;isOutput=true]$($output.$_.value))"
                }
              pwsh: true
      - job: Compute
        pool:
          vmImage: "windows-latest" ## Only needed because of Publish-AzVMDscConfiguration
        dependsOn:
          - Network
          - TemplateTests
          - Storage
        variables:
          subnetName: $[ dependencies.Network.outputs['ParseNetworkARMOutput.subnetName'] ]
          virtualNetworkName: $[ dependencies.Network.outputs['ParseNetworkARMOutput.virtualNetworkName'] ]
          loadBalancerName: $[ dependencies.Network.outputs['ParseNetworkARMOutput.loadBalancerName'] ]
          loadBalancerBackendPoolName: $[ dependencies.Network.outputs['ParseNetworkARMOutput.loadBalancerBackendPoolName'] ]
          storageAccountName: $[ dependencies.Storage.outputs['ParseStorageARMOutput.storageAccountName'] ]
          setupScriptContainerName: $[ dependencies.Storage.outputs['ParseStorageARMOutput.setupScriptContainerName'] ]
          sasToken: $[ dependencies.Storage.outputs['ParseStorageARMOutput.sasToken'] ]
          storageAccountKey: $[ dependencies.Storage.outputs['ParseStorageARMOutput.storageAccountKey'] ]
        steps:
          - task: AzurePowerShell@5
            displayName: "Package up DSC script"
            inputs:
              azureSubscription: "ARM"
              ScriptType: "InlineScript"
              Inline: |
                Install-Module xPSDesiredStateConfiguration -Force
                Publish-AzVMDscConfiguration "$(System.DefaultWorkingDirectory)\buildscripts\iis_setup.ps1" -OutputArchivePath "$(System.DefaultWorkingDirectory)\buildscripts\iis_setup.zip"
              FailOnStandardError: true
              azurePowerShellVersion: "LatestVersion"
          - task: AzureCLI@2
            displayName: "Copy IIS DSC script to storage account"
            inputs:
              azureSubscription: "ARM"
              scriptType: "batch"
              scriptLocation: "inlineScript"
              inlineScript: 'az storage blob upload --container-name $(setupScriptContainerName) --file "$(System.DefaultWorkingDirectory)/buildscripts/iis_setup.zip" --name iis_setup.zip --account-name "$(storageAccountName)" --account-key "$(storageAccountKey)"'
          - task: AzureResourceManagerTemplateDeployment@3
            name: "Compute"
            inputs:
              azureResourceManagerConnection: "ARM"
              subscriptionId: "$(subscription_id)"
              action: "Create Or Update Resource Group"
              resourceGroupName: $(azure_resource_group_name)
              location: "East US"
              templateLocation: "Linked artifact"
              csmFile: "$(System.DefaultWorkingDirectory)/buildscripts/arm_templates/compute.json"
              csmParametersFile: "$(System.DefaultWorkingDirectory)/buildscripts/arm_templates/compute.params.json"
              overrideParameters: "-subnetName $(subnetName) -virtualNetworkName $(virtualNetworkName) -loadBalancerName $(loadBalancerName) -loadBalancerBackendPoolName $(loadBalancerBackendPoolName) -storageAccountName $(storageAccountName) -setupScriptContainerName $(setupScriptContainerName) -sasToken $(sasToken)"
              deploymentMode: "Incremental"
      - job: Database
        pool:
          vmImage: "windows-latest"
        dependsOn:
          - Storage
          - TemplateTests
        steps:
          - task: AzureResourceManagerTemplateDeployment@3
            name: "DatabaseARMDeployment"
            inputs:
              azureResourceManagerConnection: "ARM"
              subscriptionId: "$(subscription_id)"
              action: "Create Or Update Resource Group"
              resourceGroupName: $(azure_resource_group_name)
              location: "East US"
              templateLocation: "Linked artifact"
              csmFile: "$(System.DefaultWorkingDirectory)/buildscripts/arm_templates/database.json"
              csmParametersFile: "$(System.DefaultWorkingDirectory)/buildscripts/arm_templates/database.params.json"
              deploymentMode: "Incremental"
              deploymentOutputs: database_arm
          - task: PowerShell@2
            name: "ParseDatabaseARMOutput"
            inputs:
              targetType: "inline"
              script: |
                $output = $Env:database_arm | ConvertFrom-Json
                $vars = 'sqlServerName'
                $vars | foreach {
                  echo "##vso[task.setvariable variable=$_;isOutput=true]$($output.$_.value)"
                }
              pwsh: true
      - job: InfrastructureTesting
        dependsOn:
          - Network
          - Storage
          - Compute
          - Database
          - TemplateTests
        pool:
          vmImage: "windows-latest"
        variables:
          publicDnsName: $[ dependencies.Network.outputs['ParseNetworkARMOutput.publicDnsName'] ]
        steps:
          - task: AzurePowerShell@5
            inputs:
              azureSubscription: "ARM"
              ScriptType: "FilePath"
              ScriptPath: "$(System.DefaultWorkingDirectory)/buildscripts/tests/invoke-infrastructure-test.ps1"
              ScriptArguments: '-Parameter @{publicDnsName="$(publicDnsName)"}'
              FailOnStandardError: true
              azurePowerShellVersion: "LatestVersion"
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: "NUnit"
              testResultsFiles: "$(System.DefaultWorkingDirectory)/buildscripts/tests/infrastructure.tests.xml"
              failTaskOnFailedTests: true
  - stage: AppDeployment
    dependsOn: Infrastructure
    jobs:
      - job: AppBuild
        pool:
          vmImage: "ubuntu-latest"
        steps:
          # Build and publish the application library
          - task: DotNetCoreCLI@2
            displayName: "dotnet restore"
            inputs:
              command: restore
              projects: "**/*.csproj"
          - task: DotNetCoreCLI@2
            displayName: "dotnet build"
            inputs:
              command: build
              projects: "**/*.csproj"
              arguments: "--configuration $(buildConfiguration)"
          - task: DotNetCoreCLI@2
            displayName: "dotnet publish"
            inputs:
              command: publish
              publishWebProjects: True
              arguments: "--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)"
              zipAfterPublish: True
          # Publish the app as an artifact
          - publish: $(Build.StagingDirectory)
            artifact: app
      - job: Release
        dependsOn: AppBuild
        steps:
          # Don't clone the repo
          - checkout: none

          # Download the published application artifact
          - download: current
            artifact: app
        # Release the app
        # - task: AzureRmWebAppDeployment@4
        #   inputs:
        #     ConnectionType: 'AzureRM'
        #     azureSubscription: 'ARM'
        #     WebAppName: $(webAppName)
        #     package: '$(Pipeline.Workspace)/**/*.zip'
        #     WebAppKind: WebApp
